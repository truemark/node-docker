name: release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    # Run at 1PM UTC every Monday
    - cron: '0 13 * * 1'

permissions:
  id-token: write
  contents: write

jobs:
  keepalive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Keepalive
        uses: gautamkrishnar/keepalive-workflow@v1
  build-16-alpine-317:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Alpine 3.17
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=alpine \
            --build-arg OS_VERSION=3.17 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-alpine-3.17 \
            -t truemark/node:16-alpine-3.17 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-alpine-3.17 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-alpine-3.17"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-alpine-3.17"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-alpine-3.17 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-alpine-3.17"
          dest-image: "docker://public.ecr.aws/truemark/node:16-alpine-3.17"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-alpine-316:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Alpine 3.16
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=alpine \
            --build-arg OS_VERSION=3.16 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-alpine-3.16 \
            -t truemark/node:16-alpine-3.16 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-alpine-3.16 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-alpine-3.16"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-alpine-3.16"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-alpine-3.16 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-alpine-3.16"
          dest-image: "docker://public.ecr.aws/truemark/node:16-alpine-3.16"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-ubuntu-jammy:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Ubuntu Jammy
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=ubuntu \
            --build-arg OS_VERSION=jammy \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy \
            -t truemark/node:16-ubuntu-jammy \
            .
      - name: Copy ${{ env.NODE_VERSION }}-ubuntu-jammy to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-ubuntu-jammy to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-ubuntu-jammy"
          dest-image: "docker://public.ecr.aws/truemark/node:16-ubuntu-jammy"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-ubuntu-focal:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Ubuntu Focal
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=ubuntu \
            --build-arg OS_VERSION=focal \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal \
            -t truemark/node:16-ubuntu-focal \
            .
      - name: Copy ${{ env.NODE_VERSION }}-ubuntu-focal to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-ubuntu-focal to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-ubuntu-focal"
          dest-image: "docker://public.ecr.aws/truemark/node:16-ubuntu-focal"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-debian-bookworm:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Debian Bookworm
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=debian \
            --build-arg OS_VERSION=bookworm \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-debian-bookworm \
            -t truemark/node:16-debian-bookworm \
            .
      - name: Copy ${{ env.NODE_VERSION }}-debian-bookworm to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-debian-bookworm"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-debian-bookworm"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-debian-bookworm to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-debian-bookworm"
          dest-image: "docker://public.ecr.aws/truemark/node:16-debian-bookworm"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-debian-bullseye:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Debian Bullseye
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=debian \
            --build-arg OS_VERSION=bullseye \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-debian-bullseye \
            -t truemark/node:16-debian-bullseye \
            .
      - name: Copy ${{ env.NODE_VERSION }}-debian-bullseye to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-debian-bullseye"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-debian-bullseye"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-debian-bullseye to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-debian-bullseye"
          dest-image: "docker://public.ecr.aws/truemark/node:16-debian-bullseye"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-amazon-linux-2023:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Amazon Linux 2023
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=amazonlinux \
            --build-arg OS_VERSION=2023 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023 \
            -t truemark/node:16-amazonlinux-2023 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-amazonlinux-2023 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-amazonlinux-2023 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-amazonlinux-2023"
          dest-image: "docker://public.ecr.aws/truemark/node:16-amazonlinux-2023"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-16-amazon-linux-2022:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 16 Amazon Linux 2022
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=amazonlinux \
            --build-arg OS_VERSION=2022 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022 \
            -t truemark/node:16-amazonlinux-2022 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-amazonlinux-2022 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-amazonlinux-2022 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:16-amazonlinux-2022"
          dest-image: "docker://public.ecr.aws/truemark/node:16-amazonlinux-2022"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  package-16:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [build-16-alpine-317,build-16-alpine-316,build-16-ubuntu-jammy,build-16-ubuntu-focal,build-16-debian-bookworm,build-16-debian-bullseye,build-16-amazon-linux-2023,build-16-amazon-linux-2022]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 16
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v16.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: ${{ env.TAG_EXISTS != 'true' }}
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Package
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022" ARCH="amd64" FILE="node-16-amazonlinux-2022-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022" ARCH="arm64" FILE="node-16-amazonlinux-2022-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023" ARCH="amd64" FILE="node-16-amazonlinux-2023-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023" ARCH="arm64" FILE="node-16-amazonlinux-2023-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal" ARCH="amd64" FILE="node-16-ubuntu-focal-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal" ARCH="arm64" FILE="node-16-ubuntu-focal-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy" ARCH="amd64" FILE="node-16-ubuntu-jammy-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy" ARCH="arm64" FILE="node-16-ubuntu-jammy-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bookworm" ARCH="amd64" FILE="node-16-debian-bookworm-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bookworm" ARCH="arm64" FILE="node-16-debian-bookworm-arm64.tar.gz" ./getlayer.sh    
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bullseye" ARCH="amd64" FILE="node-16-debian-bullseye-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bullseye" ARCH="arm64" FILE="node-16-debian-bullseye-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="amd64" FILE="node-16-alpine-3.16-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="arm64" FILE="node-16-alpine-3.16-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.17" ARCH="amd64" FILE="node-16-alpine-3.17-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.17" ARCH="arm64" FILE="node-16-alpine-3.17-arm64.tar.gz" ./getlayer.sh
      - uses: actions/upload-artifact@v3
        if: ${{ env.TAG_EXISTS != 'true' }}
        with:
          name: files
          path: |
            *.tar.gz
      - name: Upload binaries to release
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: |
            *.tar.gz
          release_name: ${{env.NODE_VERSION}}
          tag: ${{env.NODE_VERSION}}
          overwrite: true
  build-18-alpine-317:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Alpine 3.17
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=alpine \
            --build-arg OS_VERSION=3.17 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-alpine-3.17 \
            -t truemark/node:18-alpine-3.17 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-alpine-3.17 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-alpine-3.17"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-alpine-3.17"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-alpine-3.17 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-alpine-3.17"
          dest-image: "docker://public.ecr.aws/truemark/node:18-alpine-3.17"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-alpine-316:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Alpine 3.16
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=alpine \
            --build-arg OS_VERSION=3.16 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-alpine-3.16 \
            -t truemark/node:18-alpine-3.16 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-alpine-3.16 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-alpine-3.16"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-alpine-3.16"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-alpine-3.16 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-alpine-3.16"
          dest-image: "docker://public.ecr.aws/truemark/node:18-alpine-3.16"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-ubuntu-jammy:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Ubuntu Jammy
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=ubuntu \
            --build-arg OS_VERSION=jammy \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy \
            -t truemark/node:18-ubuntu-jammy \
            .
      - name: Copy ${{ env.NODE_VERSION }}-ubuntu-jammy to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-ubuntu-jammy to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-ubuntu-jammy"
          dest-image: "docker://public.ecr.aws/truemark/node:18-ubuntu-jammy"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-ubuntu-focal:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Ubuntu Focal
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=ubuntu \
            --build-arg OS_VERSION=focal \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal \
            -t truemark/node:18-ubuntu-focal \
            .
      - name: Copy ${{ env.NODE_VERSION }}-ubuntu-focal to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-ubuntu-focal to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-ubuntu-focal"
          dest-image: "docker://public.ecr.aws/truemark/node:18-ubuntu-focal"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-debian-bookworm:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Debian Bookworm
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=debian \
            --build-arg OS_VERSION=bookworm \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-debian-bookworm \
            -t truemark/node:18-debian-bookworm \
            .
      - name: Copy ${{ env.NODE_VERSION }}-debian-bookworm to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-debian-bookworm"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-debian-bookworm"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-debian-bookworm to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-debian-bookworm"
          dest-image: "docker://public.ecr.aws/truemark/node:18-debian-bookworm"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-debian-bullseye:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Debian Bullseye
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=debian \
            --build-arg OS_VERSION=bullseye \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-debian-bullseye \
            -t truemark/node:18-debian-bullseye \
            .
      - name: Copy ${{ env.NODE_VERSION }}-debian-bullseye to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-debian-bullseye"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-debian-bullseye"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 16-debian-bullseye to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-debian-bullseye"
          dest-image: "docker://public.ecr.aws/truemark/node:18-debian-bullseye"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-amazon-linux-2023:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Amazon Linux 2023
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=amazonlinux \
            --build-arg OS_VERSION=2023 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023 \
            -t truemark/node:18-amazonlinux-2023 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-amazonlinux-2023 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-amazonlinux-2023 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-amazonlinux-2023"
          dest-image: "docker://public.ecr.aws/truemark/node:18-amazonlinux-2023"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  build-18-amazon-linux-2022:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "${{ secrets.AWS_ASSUME_ROLE }}"
          aws-region: "us-east-1"
          role-duration-seconds: 22200
      - name: Login to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Buildx Remote Docker
        if: ${{ env.TAG_EXISTS != 'true' }}
        id: buildx
        uses: truemark/aws-buildx-remote-docker-instance-action@v4
        with:
          security-group-id: "${{ vars.SECURITY_GROUP_ID }}"
          subnet-id: "${{ vars.SUBNET_ID }}"
          instance-profile: "${{ vars.INSTANCE_PROFILE }}"
          region: "us-east-2"
          arm64-instance-type: "c7g.xlarge"
          amd64-instance-type: "c6i.xlarge"
      - name: List builder instances
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: docker buildx ls
      - name: Build 18 Amazon Linux 2022
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64,linux/amd64 \
            --build-arg OS_NAME=amazonlinux \
            --build-arg OS_VERSION=2022 \
            --build-arg NODE_VERSION="${{ env.NODE_VERSION }}" \
            -f Dockerfile \
            -t truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022 \
            -t truemark/node:18-amazonlinux-2022 \
            .
      - name: Copy ${{ env.NODE_VERSION }}-amazonlinux-2022 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022"
          dest-image: "docker://public.ecr.aws/truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
      - name: Copy 18-amazonlinux-2022 to ECR
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://truemark/node:18-amazonlinux-2022"
          dest-image: "docker://public.ecr.aws/truemark/node:18-amazonlinux-2022"
          src-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          src-password: "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"
          dest-username: "${{ steps.ecr-login.outputs.docker_username_public_ecr_aws }}"
          dest-password: "${{ steps.ecr-login.outputs.docker_password_public_ecr_aws }}"
          multi-arch: "all"
  package-18:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [build-18-alpine-317,build-18-alpine-316,build-18-ubuntu-jammy,build-18-ubuntu-focal,build-18-debian-bookworm,build-18-debian-bullseye,build-18-amazon-linux-2023,build-18-amazon-linux-2022]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Version 18
        run: |
          export NODE_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "Version: ${NODE_VERSION}"
          export TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_VERSION}\") != null")
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV
          echo "Exists: ${TAG_EXISTS}"
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: ${{ env.TAG_EXISTS != 'true' }}
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Package
        if: ${{ env.TAG_EXISTS != 'true' }}
        run: |
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022" ARCH="amd64" FILE="node-18-amazonlinux-2022-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2022" ARCH="arm64" FILE="node-18-amazonlinux-2022-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023" ARCH="amd64" FILE="node-18-amazonlinux-2023-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-amazonlinux-2023" ARCH="arm64" FILE="node-18-amazonlinux-2023-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal" ARCH="amd64" FILE="node-18-ubuntu-focal-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-focal" ARCH="arm64" FILE="node-18-ubuntu-focal-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy" ARCH="amd64" FILE="node-18-ubuntu-jammy-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-ubuntu-jammy" ARCH="arm64" FILE="node-18-ubuntu-jammy-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bookworm" ARCH="amd64" FILE="node-18-debian-bookworm-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bookworm" ARCH="arm64" FILE="node-18-debian-bookworm-arm64.tar.gz" ./getlayer.sh    
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bullseye" ARCH="amd64" FILE="node-18-debian-bullseye-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-debian-bullseye" ARCH="arm64" FILE="node-18-debian-bullseye-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="amd64" FILE="node-18-alpine-3.16-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="arm64" FILE="node-18-alpine-3.16-arm64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.17" ARCH="amd64" FILE="node-18-alpine-3.17-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.17" ARCH="arm64" FILE="node-18-alpine-3.17-arm64.tar.gz" ./getlayer.sh
      - uses: actions/upload-artifact@v3
        if: ${{ env.TAG_EXISTS != 'true' }}
        with:
          name: files
          path: |
            *.tar.gz
      - name: Upload binaries to release
        if: ${{ env.TAG_EXISTS != 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: |
            *.tar.gz
          release_name: ${{env.NODE_VERSION}}
          tag: ${{env.NODE_VERSION}}
          overwrite: true
