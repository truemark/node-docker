name: build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    # Run at 1PM UTC every Monday
    - cron: '0 13 * * 1'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

# https://github.com/gautamkrishnar/keepalive-workflow/discussions/13
permissions:
  id-token: write
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PREFIX: ${{ steps.set-prefix-release.outputs.PREFIX }}${{ steps.set-prefix-beta.outputs.PREFIX }}
      ROOT_PREFIX: ${{ steps.set-prefix-release.outputs.ROOT_PREFIX }}${{ steps.set-prefix-beta.outputs.ROOT_PREFIX }}
      NODE_18_VERSION: ${{ steps.set-node-versions.outputs.NODE_18_VERSION }}
      NODE_18_TAG_EXISTS: ${{ steps.set-node-versions.outputs.NODE_18_TAG_EXISTS }}
      NODE_20_VERSION: ${{ steps.set-node-versions.outputs.NODE_20_VERSION }}
      NODE_20_TAG_EXISTS: ${{ steps.set-node-versions.outputs.NODE_20_TAG_EXISTS }}
      NODE_22_VERSION: ${{ steps.set-node-versions.outputs.NODE_22_VERSION }}
      NODE_22_TAG_EXISTS: ${{ steps.set-node-versions.outputs.NODE_22_TAG_EXISTS }}
    steps:
        - id: set-prefix-release
          if: github.ref == 'refs/heads/main'
          run: |
            PREFIX=""
            echo "PREFIX=$PREFIX" >> $GITHUB_OUTPUT
            ROOT_PREFIX="latest"
            echo "ROOT_PREFIX=$ROOT_PREFIX" >> $GITHUB_OUTPUT
        - id: set-prefix-beta
          if: github.ref != 'refs/heads/main'
          run: |
            PREFIX="beta-"
            echo "PREFIX=$PREFIX" >> $GITHUB_OUTPUT
            ROOT_PREFIX="beta"
            echo "ROOT_PREFIX=$ROOT_PREFIX" >> $GITHUB_OUTPUT
        - id: set-node-versions
          run: |
            export NODE_18_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v18.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
            echo "NODE_18_VERSION=${NODE_18_VERSION}" >> $GITHUB_OUTPUT
            echo "NODE_18_VERSION=${NODE_18_VERSION}"
            export NODE_18_TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_18_VERSION}\") != null")
            echo "NODE_18_TAG_EXISTS=${NODE_18_TAG_EXISTS}" >> $GITHUB_OUTPUT
            echo "NODE_18_TAG_EXISTS=${NODE_18_TAG_EXISTS}"
            export NODE_20_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v20.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
            echo "NODE_20_VERSION=${NODE_20_VERSION}" >> $GITHUB_OUTPUT
            echo "NODE_20_VERSION=${NODE_20_VERSION}"
            export NODE_20_TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_20_VERSION}\") != null")
            echo "NODE_20_TAG_EXISTS=${NODE_20_TAG_EXISTS}" >> $GITHUB_OUTPUT
            echo "NODE_20_TAG_EXISTS=${NODE_20_TAG_EXISTS}"
            export NODE_22_VERSION=$(curl -fsSL https://nodejs.org/dist/latest-v22.x/ | grep linux-x64.tar.gz | sed -n "s/.*>node-v\(.*\)-linux.*<.*/\1/p")
            echo "NODE_22_VERSION=${NODE_22_VERSION}" >> $GITHUB_OUTPUT
            echo "NODE_22_VERSION=${NODE_22_VERSION}"
            export NODE_22_TAG_EXISTS=$( curl -fsSL https://api.github.com/repos/truemark/node-docker/tags | jq -r "[.[].name] | index(\"${NODE_22_VERSION}\") != null")
            echo "NODE_22_TAG_EXISTS=${NODE_22_TAG_EXISTS}" >> $GITHUB_OUTPUT
            echo "NODE_22_TAG_EXISTS=${NODE_22_TAG_EXISTS}"
###############################################################################
# Alpine Linux Builds - https://alpinelinux.org/releases/
###############################################################################
# Alpine Node 18
  build-18-alpine-316: # 3.16 EOL 2024-05-23
    if: ${{ needs.prepare.outputs.NODE_18_TAG_EXISTS != 'true' }}
    needs: [ prepare ]
    uses: truemark/github-workflows/.github/workflows/docker-buildx.yml@develop
    with:
      dockerfile: "Dockerfile"
      images: "truemark/node:${{ needs.prepare.outputs.PREFIX }}${{ needs.prepare.outputs.NODE_18_VERSION }}alpine-3.16,truemark/node:${{ needs.prepare.outputs.PREFIX }}18-alpine-3.16"
      copy_to_ecr_prefix: "public.ecr.aws/truemark"
      docker_build_args: '["OS_NAME=alpine", "OS_VERSION=3.16", "NODE_VERSION=${{ needs.prepare.outputs.NODE_18_VERSION }}"]'
      security_group_id: ${{ vars.SECURITY_GROUP_ID }}
      subnet_id: ${{ vars.SUBNET_ID }}
      instance_profile: ${{ vars.INSTANCE_PROFILE }}
      region: ${{ vars.AWS_REGION }}
      use_remote: true
    secrets:
      aws_assume_role: ${{ secrets.AWS_ASSUME_ROLE }}
      docker_hub_username: ${{ secrets.DOCKER_HUB_USERNAME }}
      docker_hub_password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  package-18-alpine-316:
    if: ${{ needs.prepare.outputs.NODE_18_TAG_EXISTS != 'true' }}
    runs-on: ubuntu-latest
    needs: [ prepare, build-18-alpine-316 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Package
        run: |
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="amd64" FILE="node-18-alpine-3.16-amd64.tar.gz" ./getlayer.sh
          IMAGE="truemark/node:${{ env.NODE_VERSION }}-alpine-3.16" ARCH="arm64" FILE="node-18-alpine-3.16-arm64.tar.gz" ./getlayer.sh
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: files
          path: |
            *.tar.gz
      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: |
            *.tar.gz
          release_name: ${{needs.prepare.outputs.NODE_18_VERSION}}
          tag: ${{needs.prepare.outputs.NODE_18_VERSION}}
          overwrite: true
